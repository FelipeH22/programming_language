%{
    #define NOTHING -1
    #include <stdio.h>
    #include <stdlib.h>
    struct treeNode
    {
        int item;
        int nodeIdentifier;
        struct treeNode *first;
        struct treeNode *second;
    };

    typedef struct treeNode TREE_NODE;
    typedef TREE_NODE *BINARY_TREE;

    int evaluate(BINARY_TREE);
    BINARY_TREE create_node(int, int, BINARY_TREE, BINARY_TREE);
%}


/////////////////

%{
    #include <stdio.h>
    #include <stdlib.h>

    #define SYMTABSIZE 50
    #define IDLENGTH 15
    #define NOTHING -1
    #define INDENTOFFSET 2

    enum ParseTreeNodeType {PROGRAM, BLOCK};

    #ifndef TRUE
    #define TRUE 1
    #endif

    #ifndef FALSE
    #define FALSE 0
    #endif

    #ifndef NULL
    #define NULL 0
    #endif

    struct treeNode
    {
        int item;
        int nodeIdentifier;
        struct treeNode *first;
        struct treeNode *second;
        struct treeNode *third;
    };
    typedef struct treeNode TREE_NODE;
    typedef TREE_NODE *TERNARY_TREE;

    TERNARY_TREE create_node(int, int, TERNARY_TREE, TERNARY_TREE, TERNARY_TREE);

    struct symTabNode {
        char identifier[IDLENGTH]
    };
    typedef struct symTabNode SYMTABNODE;
    typedef SYMTABNODE *SYMTABNODEPTR;

    SYMTABNODEPTR symTab[SYMTABSIZE];
    int currentSymTabSize = 0;
%}

%start program

%union{
    int iVal;
    TERNARY_TREE tval;
}


TERNARY_TREE create_node(int ival, int case_identifier, TERNARY_TREE p1, TERNARY_TREE p2, TERNARY_TREE p3)
{
    TERNARY_TREE t;
    t = (TERNARY_TREE)malloc(sizeof(TREE_NODE));
    t->item = ival;
    t->nodeIdentifier 0 case_identifier;
    t->first = p1;
    t->second = p2;
    t->third = p3;
    return(t);
}